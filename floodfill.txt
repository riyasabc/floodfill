bool isValidLocation(vector<vector<bool>> &isdone, int x, int y)
{
    if (x < 0 || y < 0 || x >= isdone.size() || y >= isdone[0].size() || isdone[x][y])
    {
        return false;
    }
    return true;
}

int floodfill(vector<vector<bool>> &isdone, int sr, int sc, int er, int ec, string ans)
{
    if (sr == er && sc == ec)
    {
        cout << ans << endl;
        return 1;
    }

    int count = 0;
    isdone[sr][sc] = true;

    if (isValidLocation(isdone, sr + 1, sc))
    {
        count += floodfill(isdone, sr + 1, sc, er, ec, ans + "D");
    }

    if (isValidLocation(isdone, sr, sc + 1))
    {
        count += floodfill(isdone, sr, sc + 1, er, ec, ans + "R");
    }

    if (isValidLocation(isdone, sr - 1, sc))
    {
        count += floodfill(isdone, sr - 1, sc, er, ec, ans + "U");
    }

    if (isValidLocation(isdone, sr, sc - 1))
    {
        count += floodfill(isdone, sr, sc - 1, er, ec, ans + "L");
    }

    isdone[sr][sc] = false;

    return count;
}

int floodfill_(vector<vector<bool>> &isdone, int sr, int sc, int er, int ec, string ans)
{
    if (sr == er && sc == ec)
    {
        cout << ans << endl;
        return 0;
    }

    int count = 0;
    isdone[sr][sc] = true;
    int max_ = 0;
    if (isValidLocation(isdone, sr + 1, sc))
    {
        max_ = max(max_, floodfill_(isdone, sr + 1, sc, er, ec, ans + "D"));
    }

    if (isValidLocation(isdone, sr, sc + 1))
    {
        max_ = max(max_, floodfill_(isdone, sr, sc + 1, er, ec, ans + "R"));
    }

    if (isValidLocation(isdone, sr - 1, sc))
    {
        max_ = max(max_, floodfill_(isdone, sr - 1, sc, er, ec, ans + "U"));
    }

    if (isValidLocation(isdone, sr, sc - 1))
    {
        max_ = max(max_, floodfill_(isdone, sr, sc - 1, er, ec, ans + "L"));
    }

    isdone[sr][sc] = false;

    return max_ + 1;
}

int floodfill_dir(vector<vector<bool>> &isdone, int sr, int sc, int er, int ec, string ans)
{
    if (sr == er && sc == ec)
    {
        cout << ans << endl;
        return 1;
    }

    int count = 0;
    isdone[sr][sc] = true;

    string dir_[8] = {"R", "D", "L", "U", "a", "b", "c", "d"};
    int dir[8][2] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}, {1, 1}, {-1, -1}, {-1, 1}, {1, -1}};

    for (int d = 0; d < 8; d++)
    {
        int x = sr + dir[d][0];
        int y = sc + dir[d][1];

        if (isValidLocation(isdone, x, y))
        {
            count += floodfill_dir(isdone, x, y, er, ec, ans + dir_[d]);
        }
    }

    isdone[sr][sc] = false;

    return count;
}

void flodfillQuestions()
{
    vector<vector<bool>> isdone = {
        {0, 1, 0, 0, 0},
        {0, 0, 1, 0, 1},
        {0, 0, 0, 0, 0},
        {0, 1, 0, 0, 0},
    };
    cout << floodfill_dir(isdone, 0, 0, 2, 3, "") << endl;
}